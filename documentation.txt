1. Vad gör "ADD employees.sql /docker-entrypoint-initdb.d/employees.sql" i er Dockerfile? 

Svar:  Den lägger till employees.sql i en docker image, employees.sql förväntas innehålla SQL-kommandon 
som ska köras vid uppstart av MariaDB containern. De kopierar filen employees.sql från din lokala dator 
till en speciell plats inuti Docker-containern som heter "/docker-entrypoint-initdb.d/employees.sql"

Om den hittar några SQL-filer där kommer den att köra dessa kommandon och skapa tabeller 
lägga till data eller göra andra saker som du specificerar i SQL-filen.

Så genom att inkludera employees.sql i Dockerfilen och placera den i /docker-entrypoint-initdb.d/, 
ser vi till att MariaDB containern känner till dessa SQL-kommandon och kör dem vid uppstart.

På så sätt kan du använda 'employees.sql' filen för att definiera och utföra 
önskade databasåtgärder när MariaDB-containern startar.


2: Hur löste ni delen "Skapa/läs data från databasen med mariadb.py". Skriv kortfattat nedan. 

Svar:  Genom att jag mappade port 3307 på min localhost till port 3306 på containern kunde jag skapa en anslutning 
mellan min värdmaskin och MariaDB-containern 
och körde detta kommandon "docker run -d --name employees -p 127.0.0.1:3307:3306 'IMAGE ID' " för den lösningen. 

I mitt Python-skript la jag till port=3307 i connection-delen 
för att specificera att anslutningen skulle göras till port 3307 på min värdmaskin. 
Jag gjorde detta för att matcha portmappningar jag hade konfigurerat när jag körde Docker-containern.
På detta sätt kunde jag kommunicera med MariaDB-databasen i containern genom att använda rätt port för anslutning. 
Det möjliggjorde att jag kunde skapa och läsa data från databasen genom mitt Python-skript.



3: Stötte ni på andra problem och hur löste ni dessa? Svara nedan.

Svar: Jag stötte på problem om att automatiskt hämta lösenordet från miljövariablerna “environment variables”. 
Jag var tvungen att manuellt ange lösenordet i min python-kod för att komma runt detta hinder. 

Dessutom stötte jag på ett fel när jag använde "cursor.commit()" i min python-kod. 
För att lösa detta ändrade jag det till "connection.commit()". 

Genom att göra denna ändring kunde jag eliminera felmeddelandet som jag fick som var 
'CMySQLCursor' object has no attribute 'commit', och då kunde data sparas korrekt i databasen.
